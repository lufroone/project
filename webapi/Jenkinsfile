pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "go-webapp"
        DOCKER_TAG = "latest"
        DOCKER_CONTAINER_NAME = "go-app"
        APP_PORT = "8081"
        KUBE_NAMESPACE_DEV = "development"
        KUBE_NAMESPACE_PROD = "production"
        DEPLOYMENT_FILE_DEV = "webapi/k8s/deployment-dev.yaml"
        DEPLOYMENT_FILE_PROD = "webapi/k8s/deployment-prod.yaml"
        ENDPOINT_URL = "http://localhost:8081/health"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/JeremyRbs/project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Skip building local image - will be built in Minikube context"
                }
            }
        }

        stage('Start minikube') {
            steps {
                script {
                    bat '''
                        minikube delete
                        minikube start --driver=docker --force --extra-config=kubelet.authentication-token-webhook=true --extra-config=kubelet.authorization-mode=Webhook
                        minikube addons enable storage-provisioner
                        
                        echo "=== Démarrage du tunnel minikube en arrière-plan ==="
                        start /B cmd /c "minikube tunnel > tunnel.log 2>&1"
                        
                        echo "=== Attente pour l'établissement du tunnel ==="
                        ping -n 10 127.0.0.1 >nul
                        
                        echo "=== Vérification du tunnel ==="
                        type tunnel.log
                        
                        echo "=== Vérification du processus tunnel ==="
                        tasklist /FI "IMAGENAME eq minikube.exe" /FI "WINDOWTITLE eq tunnel*"
                        
                        echo "=== Vérification de la connectivité des services ==="
                        minikube service list
                        
                        echo "=== Test de connexion basique ==="
                        kubectl run test-nginx --image=nginx --port=80 --namespace=default
                        kubectl expose pod test-nginx --type=LoadBalancer --port=80 --namespace=default
                        ping -n 10 127.0.0.1 >nul
                        kubectl get service test-nginx -n default
                        kubectl delete service test-nginx -n default
                        kubectl delete pod test-nginx -n default
                    '''
                }
            }
        }

        stage('Create Namespaces') {
            steps {
                script {
                    bat 'kubectl create namespace %KUBE_NAMESPACE_DEV% --dry-run=client -o yaml | kubectl apply -f -'
                    bat 'kubectl create namespace %KUBE_NAMESPACE_PROD% --dry-run=client -o yaml | kubectl apply -f -'
                    // Debug des namespaces
                    bat '''
                        echo "=== État des namespaces ==="
                        kubectl get namespaces
                    '''
                }
            }
        }

        stage('Configure RBAC') {
            steps {
                script {
                    bat '''
                        @echo off
                        REM Création des ClusterRoleBindings
                        kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --user=system:node:minikube --group=system:nodes || echo "ClusterRoleBinding already exists"
                        kubectl create clusterrolebinding default-sa --clusterrole=cluster-admin --serviceaccount=default:default || echo "ClusterRoleBinding already exists"
                        kubectl create clusterrolebinding development-sa --clusterrole=cluster-admin --serviceaccount=development:default || echo "ClusterRoleBinding already exists"
                        
                        REM Création des ServiceAccounts
                        kubectl create serviceaccount default -n development || echo "ServiceAccount already exists"
                        kubectl create serviceaccount jenkins -n development || echo "ServiceAccount already exists"
                        
                        REM Configuration des permissions spécifiques
                        kubectl create rolebinding jenkins-admin --clusterrole=admin --serviceaccount=development:jenkins -n development || echo "RoleBinding already exists"
                        kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=development:default -n development || echo "RoleBinding already exists"
                        
                        REM Vérification des configurations
                        echo "=== État des ServiceAccounts ==="
                        kubectl get serviceaccounts -n development
                        
                        echo "=== État des RoleBindings ==="
                        kubectl get rolebindings -n development
                        
                        echo "=== État des ClusterRoleBindings ==="
                        kubectl get clusterrolebindings | findstr -i "minikube-rbac\\|default-sa\\|development-sa"
                        
                        echo "=== Vérification des permissions ==="
                        kubectl auth can-i create deployments --namespace development
                        kubectl auth can-i create services --namespace development
                    '''
                }
            }
        }

        stage('Load Image to Minikube') {
            steps {
                script {
                    bat '''
                        @echo off
                        REM Configuration de l'environnement Docker de Minikube
                        FOR /f "tokens=*" %%i IN ('minikube -p minikube docker-env') DO @%%i
                        
                        echo "=== Building Docker image in Minikube context ==="
                        cd webapi
                        docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .
                        
                        echo "=== Vérification de l'image construite ==="
                        docker images | findstr %DOCKER_IMAGE%
                        
                        echo "=== Attente pour s'assurer que l'image est disponible ==="
                        ping -n 10 127.0.0.1 >nul
                        
                        echo "=== Vérification dans Minikube ==="
                        minikube ssh "docker images | grep %DOCKER_IMAGE%"
                        
                        REM Attente supplémentaire
                        ping -n 5 127.0.0.1 >nul
                    '''
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_DEV% --namespace=%KUBE_NAMESPACE_DEV%'
                    bat '''
                        echo "=== État du déploiement ==="
                        kubectl get deployments -n %KUBE_NAMESPACE_DEV%
                        
                        echo "=== État des pods ==="
                        kubectl get pods -n %KUBE_NAMESPACE_DEV%
                        
                        echo "=== Images disponibles dans Minikube ==="
                        minikube ssh "docker images | grep go-webapp"
                        
                        echo "=== Description des pods ==="
                        kubectl describe pods -n %KUBE_NAMESPACE_DEV%
                    '''
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    // Vérification du tunnel avant le test
                    bat '''
                        echo "=== Vérification du tunnel avant le test ==="
                        tasklist /FI "IMAGENAME eq minikube.exe" /FI "WINDOWTITLE eq tunnel*"
                        minikube tunnel status
                        
                        echo "=== État des services ==="
                        kubectl get services -n %KUBE_NAMESPACE_DEV% -o wide
                        minikube service go-webapp-service --url -n %KUBE_NAMESPACE_DEV%
                    '''
                    
                    // Attendre que le service soit prêt
                    bat 'ping -n 30 127.0.0.1 >nul'
                    
                    // Utiliser port-forward comme alternative
                    bat '''
                        echo "=== Tentative avec port-forward ==="
                        start /B kubectl port-forward service/go-webapp-service 8081:8081 -n %KUBE_NAMESPACE_DEV%
                        ping -n 5 127.0.0.1 >nul
                    '''
                    
                    // Test sur localhost via port-forward
                    bat 'curl -v --fail --max-time 30 http://localhost:8081/health || exit 1'
                    
                    // Nettoyage du port-forward
                    bat 'taskkill /F /IM "kubectl.exe" /FI "WINDOWTITLE eq port-forward*"'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_PROD% --namespace=%KUBE_NAMESPACE_PROD%'
                }
            }
        }
    }

    post {
        always {
            script {
                bat '''
                    echo "=== Arrêt du tunnel minikube ==="
                    taskkill /F /IM "minikube.exe" /FI "WINDOWTITLE eq tunnel*"
                '''
            }
        }
        success {
            echo 'Déploiement réussi dans les environnements Development et Production.'
        }
        failure {
            echo 'Le pipeline a échoué.'
        }
    }
}
