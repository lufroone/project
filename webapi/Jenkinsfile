pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "go-webapp"
        DOCKER_TAG = "latest"
        DOCKER_CONTAINER_NAME = "go-app"
        APP_PORT = "8081"
        KUBE_NAMESPACE_DEV = "development"
        KUBE_NAMESPACE_PROD = "production"
        DEPLOYMENT_FILE_DEV = "webapi/k8s/deployment-dev.yaml"
        DEPLOYMENT_FILE_PROD = "webapi/k8s/deployment-prod.yaml"
        ENDPOINT_URL = "http://localhost:8081/health"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/JeremyRbs/project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Skip building local image - will be built in Minikube context"
                }
            }
        }

        stage('Start minikube') {
            steps {
                script {
                    bat '''
                        minikube delete
                        minikube start --driver=docker --force --extra-config=kubelet.authentication-token-webhook=true --extra-config=kubelet.authorization-mode=Webhook
                        minikube addons enable storage-provisioner
                    '''
                }
            }
        }

        stage('Create Namespaces') {
            steps {
                script {
                    bat 'kubectl create namespace %KUBE_NAMESPACE_DEV% --dry-run=client -o yaml | kubectl apply -f -'
                    bat 'kubectl create namespace %KUBE_NAMESPACE_PROD% --dry-run=client -o yaml | kubectl apply -f -'
                    // Debug des namespaces
                    bat '''
                        echo "=== État des namespaces ==="
                        kubectl get namespaces
                    '''
                }
            }
        }

        stage('Configure RBAC') {
            steps {
                script {
                    bat '''
                        @echo off
                        kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --user=system:node:minikube --group=system:nodes || echo "ClusterRoleBinding already exists"
                        kubectl create clusterrolebinding default-sa --clusterrole=cluster-admin --serviceaccount=default:default || echo "ClusterRoleBinding already exists"
                        kubectl create clusterrolebinding development-sa --clusterrole=cluster-admin --serviceaccount=development:default || echo "ClusterRoleBinding already exists"
                        
                        echo "=== Création du ServiceAccount dans le namespace development ==="
                        kubectl create serviceaccount default -n development || echo "ServiceAccount already exists"
                        
                        echo "=== État des ClusterRoleBindings ==="
                        kubectl get clusterrolebindings | findstr -i minikube-rbac
                        kubectl get clusterrolebindings | findstr -i default-sa
                        kubectl get clusterrolebindings | findstr -i development-sa
                        
                        echo "=== État des ServiceAccounts ==="
                        kubectl get serviceaccounts -n development
                    '''
                }
            }
        }

        stage('Load Image to Minikube') {
            steps {
                script {
                    bat '''
                        @echo off
                        REM Configuration de l'environnement Docker de Minikube
                        FOR /f "tokens=*" %%i IN ('minikube -p minikube docker-env') DO @%%i
                        
                        echo "=== Building Docker image in Minikube context ==="
                        cd webapi
                        docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .
                        
                        echo "=== Vérification de l'image construite ==="
                        docker images | findstr %DOCKER_IMAGE%
                        
                        echo "=== Attente pour s'assurer que l'image est disponible ==="
                        ping -n 10 127.0.0.1 >nul
                        
                        echo "=== Vérification dans Minikube ==="
                        minikube ssh "docker images | grep %DOCKER_IMAGE%"
                        
                        REM Attente supplémentaire
                        ping -n 5 127.0.0.1 >nul
                    '''
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_DEV% --namespace=%KUBE_NAMESPACE_DEV%'
                    bat '''
                        echo "=== État du déploiement ==="
                        kubectl get deployments -n %KUBE_NAMESPACE_DEV%
                        
                        echo "=== État des pods ==="
                        kubectl get pods -n %KUBE_NAMESPACE_DEV%
                        
                        echo "=== Images disponibles dans Minikube ==="
                        minikube ssh "docker images | grep go-webapp"
                        
                        echo "=== Description des pods ==="
                        kubectl describe pods -n %KUBE_NAMESPACE_DEV%
                    '''
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    // Attendre que le service soit prêt
                    bat 'ping -n 30 127.0.0.1 >nul'
                    
                    // Récupérer l'IP de minikube
                    bat 'minikube ip > minikube-ip.txt'
                    def minikubeIp = readFile('minikube-ip.txt').trim()
                    
                    // Récupérer le NodePort du service
                    bat '''
                        echo "=== Services disponibles ==="
                        kubectl get services -n %KUBE_NAMESPACE_DEV%
                        
                        echo "=== NodePort du service ==="
                        kubectl get service go-webapp-service -n %KUBE_NAMESPACE_DEV%
                    '''
                    
                    // Extraire le NodePort et vérifier qu'il est bien récupéré
                    bat 'kubectl get service go-webapp-service -n %KUBE_NAMESPACE_DEV% -o=jsonpath="{.spec.ports[0].nodePort}" > nodeport.txt'
                    def nodePort = readFile('nodeport.txt').trim()
                    
                    echo "Minikube IP: ${minikubeIp}"
                    echo "NodePort: ${nodePort}"
                    
                    // Vérifier que le port est bien défini
                    if (nodePort?.trim()) {
                        echo "Testing URL: http://${minikubeIp}:${nodePort}/health"
                        bat "curl -v --fail --max-time 30 http://${minikubeIp}:${nodePort}/health || exit 1"
                    } else {
                        error "NodePort non trouvé pour le service go-webapp-service"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_PROD% --namespace=%KUBE_NAMESPACE_PROD%'
                }
            }
        }
    }

    post {
        success {
            echo 'Déploiement réussi dans les environnements Development et Production.'
        }
        failure {
            echo 'Le pipeline a échoué.'
        }
    }
}
