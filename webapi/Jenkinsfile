pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "go-webapp"
        DOCKER_TAG = "latest"
        DOCKER_CONTAINER_NAME = "go-app"
        APP_PORT = "8081"
        KUBE_NAMESPACE_DEV = "development"
        KUBE_NAMESPACE_PROD = "production"
        DEPLOYMENT_FILE_DEV = "webapi/k8s/deployment-dev.yaml"
        DEPLOYMENT_FILE_PROD = "webapi/k8s/deployment-prod.yaml"
        ENDPOINT_URL = "http://localhost:8081/health"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/JeremyRbs/project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Skip building local image - will be built in Minikube context"
                }
            }
        }

        stage('Start minikube') {
            steps {
                script {
                    bat '''
                        minikube delete
                        minikube start --driver=docker --force --extra-config=kubelet.authentication-token-webhook=true --extra-config=kubelet.authorization-mode=Webhook
                        minikube addons enable storage-provisioner
                        timeout /t 30
                    '''
                }
            }
        }

        stage('Create Namespaces') {
            steps {
                script {
                    bat 'kubectl create namespace %KUBE_NAMESPACE_DEV% --dry-run=client -o yaml | kubectl apply -f -'
                    bat 'kubectl create namespace %KUBE_NAMESPACE_PROD% --dry-run=client -o yaml | kubectl apply -f -'
                }
            }
        }

        stage('Configure RBAC') {
            steps {
                script {
                    // Créer un ClusterRoleBinding pour le kubelet
                    bat '''
                        kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --user=system:node:minikube --group=system:nodes
                        kubectl create clusterrolebinding default-sa --clusterrole=cluster-admin --serviceaccount=default:default
                    '''
                }
            }
        }

        stage('Load Image to Minikube') {
            steps {
                script {
                    bat 'minikube docker-env > docker-env.bat'
                    bat 'call docker-env.bat'
                    bat 'docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% webapi/.'
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_DEV% --namespace=%KUBE_NAMESPACE_DEV%'
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    // Vérifier l'état du déploiement
                    bat 'kubectl rollout status deployment/go-webapp -n %KUBE_NAMESPACE_DEV% --timeout=120s'
                    
                    // Attendre que les pods soient prêts avec un timeout plus long
                    bat 'kubectl wait --for=condition=ready pod -l app=go-webapp --namespace=%KUBE_NAMESPACE_DEV% --timeout=120s'
                    
                    // Debug - afficher plus d'informations
                    bat '''
                        kubectl get pods -n %KUBE_NAMESPACE_DEV% -o wide
                        kubectl describe pods -n %KUBE_NAMESPACE_DEV%
                        kubectl get services -n %KUBE_NAMESPACE_DEV%
                    '''
                    
                    // Récupérer l'IP de minikube
                    bat 'minikube ip > minikube-ip.txt'
                    def minikubeIp = readFile('minikube-ip.txt').trim()
                    
                    // Récupérer le NodePort du service avec une commande plus robuste
                    bat 'kubectl get service go-webapp-service -n %KUBE_NAMESPACE_DEV% -o=jsonpath="{.spec.ports[0].nodePort}" > nodeport.txt'
                    def nodePort = readFile('nodeport.txt').trim()
                    
                    // Debug - afficher les valeurs
                    echo "Minikube IP: ${minikubeIp}"
                    echo "NodePort: ${nodePort}"
                    
                    // Construire l'URL et tester avec un timeout plus court
                    echo "Testing URL: http://${minikubeIp}:${nodePort}/health"
                    bat "curl --fail --max-time 10 http://${minikubeIp}:${nodePort}/health || exit 1"
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_PROD% --namespace=%KUBE_NAMESPACE_PROD%'
                }
            }
        }
    }

    post {
        success {
            echo 'Déploiement réussi dans les environnements Development et Production.'
        }
        failure {
            echo 'Le pipeline a échoué.'
        }
    }
}
