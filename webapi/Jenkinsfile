pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "go-webapp"
        DOCKER_TAG = "latest"
        DOCKER_CONTAINER_NAME = "go-app"
        APP_PORT = "8081"
        KUBE_NAMESPACE_DEV = "development"
        KUBE_NAMESPACE_PROD = "production"
        DEPLOYMENT_FILE_DEV = "webapi/k8s/deployment-dev.yaml"
        DEPLOYMENT_FILE_PROD = "webapi/k8s/deployment-prod.yaml"
        ENDPOINT_URL = "http://localhost:8081/health"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/JeremyRbs/project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Skip building local image - will be built in Minikube context"
                }
            }
        }

        stage('Start minikube') {
            steps {
                script {
                    bat 'minikube start --driver=docker'
                }
            }
        }

        stage('Create Namespaces') {
            steps {
                script {
                    bat 'kubectl create namespace %KUBE_NAMESPACE_DEV% --dry-run=client -o yaml | kubectl apply -f -'
                    bat 'kubectl create namespace %KUBE_NAMESPACE_PROD% --dry-run=client -o yaml | kubectl apply -f -'
                }
            }
        }

        stage('Load Image to Minikube') {
            steps {
                script {
                    bat 'minikube docker-env > docker-env.bat'
                    bat 'call docker-env.bat'
                    bat 'docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% webapi/.'
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_DEV% --namespace=%KUBE_NAMESPACE_DEV%'
                }
            }
        }

        stage('Test Application') {
            steps {
                script {
                    bat 'minikube service go-webapp-service --namespace=%KUBE_NAMESPACE_DEV% --url > service-url.txt'
                    def serviceUrl = readFile('service-url.txt').trim()
                    bat "curl --fail ${serviceUrl}/health || exit 1"
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat 'kubectl apply -f %DEPLOYMENT_FILE_PROD% --namespace=%KUBE_NAMESPACE_PROD%'
                }
            }
        }
    }

    post {
        success {
            echo 'Déploiement réussi dans les environnements Development et Production.'
        }
        failure {
            echo 'Le pipeline a échoué.'
        }
    }
}
